---
import { Image } from "astro:assets";
import { Icon } from "astro-icon";
export interface Work {
  title: string;
  image: string;
  slug: string;
}

interface Props {
  works: Work[];
}
const { works } = Astro.props;
---

<carousel-element
  data-works={JSON.stringify(works)}
  class:list="w-full h-full grid  gap-3"
>
  <div class="z-40 text-gray-500 flex gap-10 w-fit justify-self-center">
    <button type="button" title="back" class="back">
      <Icon pack="ic" name="sharp-arrow-back" size={30} />
    </button>
    <button type="button" title="next" class="next">
      <Icon pack="ic" name="sharp-arrow-forward" size={30} />
    </button>
  </div>

  {
    works.map((work, index) => (
      <div
        class={` grid    wrapper ${index == 0 ? "block" : "hidden"}   `}
        data-index={index}
      >
        <a
          transition:name={`link ${work.title}`}
          href={`works/${work.slug}`}
          class="justify-self-end hover:text-primary px-2 py-1 border-text border text-sm lg:text-md font-bold font-lato"
        >
          Show more
        </a>
        <h2
          class="text-center text-2xl mb-6 text-primary "
          transition:name={`title ${work.title}`}
        >
          {work.title}
        </h2>

        <Image
          class="workImage rounded-2xl justify-self-center "
          src={work.image}
          width={720}
          height={405}
          alt={work.title}
          transition:name={`image ${work.title}`}
        />
      </div>
    ))
  }
</carousel-element>

<script>
  import type { Work } from "./Carousel.astro";
  class Carousel extends HTMLElement {
    currentIndex: number = 0;
    works: Work[];
    constructor() {
      super();
      this.works = JSON.parse(this.dataset.works ? this.dataset.works : "");
      const max = this.works.length;
      const nextButton = this.querySelector("button.next");
      const backButton = this.querySelector("button.back");
      if (nextButton && backButton) {
        nextButton.addEventListener("click", () => {
          this.updateDisplay("next", max);
        });
        backButton.addEventListener("click", () => {
          this.updateDisplay("back", max);
        });
      }
    }
    next(max: number) {
      this.currentIndex = (this.currentIndex + 1) % max;
    }
    back(max: number) {
      this.currentIndex = (this.currentIndex - 1 + max) % max;
    }
    updateDisplay(type: "next" | "back", max: number) {
      type == "next" ? this.next(max) : this.back(max);
      const elements = this.querySelectorAll(".wrapper");

      elements.forEach((element, index) => {
        const img = element.querySelector("img");
        if (img) {
          img.style.opacity = "0";

          setTimeout(() => {
            img.style.opacity = "1";
          }, 150);
        }

        if (index === this.currentIndex) {
          element.classList.remove("hidden");
          element.classList.add("block");
        } else {
          element.classList.add("hidden");
          element.classList.remove("block");
        }
      });
    }
  }
  customElements.define("carousel-element", Carousel);
</script>
<style>
  .workImage {
    transition: opacity 0.5s;
  }
</style>
